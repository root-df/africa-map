name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Runs on main branch push
  pull_request:
    branches: [ "main" ]

jobs:

  # sonarqube:
  #   name: Code Quality and Coverage (SonarQube)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #     - name: Install Dependencies
  #       run: npm install
  #     - name: Run Tests with Coverage
  #       run: npm test -- --coverage
  #     - name: SonarQube Scan
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #       run: |
  #         npx sonarqube-scanner \
  #           -Dsonar.projectKey=africa-map \
  #           -Dsonar.sources=. \
  #           -Dsonar.host.url=$SONAR_HOST_URL \
  #           -Dsonar.login=$SONAR_TOKEN \
  #           -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  trivy-scan-pre-build:
    name: Trivy scans - pre-build
    runs-on: ubuntu-latest
    steps:
      - name: Scan Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          severity: 'HIGH,CRITICAL'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          config: 'Dockerfile'

      - name: Scan source code
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          severity: 'HIGH,CRITICAL'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          path: '.'

  build-scan-push:
    name: Build + Trivy Scan + Push Docker Image  
    runs-on: ubuntu-latest
    needs: trivy-scan-pre-build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          IMAGE_NAME=africa-map-image
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG .

  # trivy-scan-post-build:
  #   name: Trivy scans - post-build
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

      - name: Get Git commit hash
        id: git_commit
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "Commit Hash: $IMAGE_TAG"

  #     - name: show image tag value
  #       run: echo $IMAGE_TAG && docker images

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        env:   
          IMAGE_NAME: africa-map-image
        with:
          scan-type: 'image'
          severity: 'HIGH,CRITICAL'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  # push-docker-image:
  #   name: Push Docker image
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
      - name: Push Docker Image
        run: |
          IMAGE_NAME=africa-map-image
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG
  
    outputs:
      image_tag: ${{ steps.git_commit.outputs.IMAGE_TAG }}

  update-helm-chart:
    name: Update Helm charts in infra repo with the new image tag
    needs: build-scan-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infra repo containing Helm charts
        uses: actions/checkout@v3
        with:
          repository: https://github.com/root-df/africa-map-infra-helm.git
          token: ${{ secrets.GITHUB_TOKEN }} #AFRICA_MAP_INFRA_TOKEN
          ref: main

      - name: Update image tag in values.yaml
        run: |
          IMAGE_TAG=${{ needs.build-scan-push.outputs.image_tag }}
          echo "Updating Helm chart image tag to $IMAGE_TAG"
          
          # Update the image tag in the Helm chart values.yaml (or any relevant file)
          sed -i "s|tag: \"\"|tag: \"$IMAGE_TAG\"|" ./values.yaml
          
      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add ./values.yaml
          git commit -m "Update Docker image tag to $IMAGE_TAG"
          git push 

  # security_scans:
  #   name: Security Scan (Snyk & Trivy)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #     - name: Install Dependencies
  #       run: npm install
  #     - name: Run Snyk Security Scan
  #       run: npx snyk test || true
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     - name: Scan Docker Image with Trivy
  #       run: |
  #         docker build -t my-app .
  #         docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasecurity/trivy image my-app

    #   - name: Update Kubernetes Manifest
    #     run: |
    #       sed -i "s|image: .*/my-app:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/my-app:$IMAGE_TAG|" k8s/deployment.yaml
    #       git config --global user.email "github-actions@github.com"
    #       git config --global user.name "GitHub Actions"
    #       git add k8s/deployment.yaml
    #       git commit -m "Updated deployment image to $IMAGE_TAG"
    #       git push origin main

#docker tag local-image:tagname new-repo:tagname
#docker push new-repo:tagname

#   notify-argocd:
#     name: Notify ArgoCD
#     needs: build-and-push
#     runs-on: ubuntu-latest
#     steps:
#       - name: Sync ArgoCD
#         run: |
#           curl -X POST "https://argocd.example.com/api/v1/applications/my-app/sync" \
#                -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}"

# deploy:
#   name: Deploy to Kubernetes with ArgoCD
#   runs-on: ubuntu-latest
#   needs: build
#   steps:
#     - name: Sync ArgoCD Application
#       run: |
#         argocd app sync my-app --server ${{ secrets.ARGOCD_SERVER }} --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }}



# update helm files -done
# update manifest 
# prometheus & grafana
# ALB in front of ingress 
# domain name in front
# cert
