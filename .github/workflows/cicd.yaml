name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Runs on main branch push
  pull_request:
    branches: [ "main" ]

jobs:

  sonarqube:
    name: Code Quality and Coverage (SonarQube)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: npm install
      - name: Run Tests with Coverage
        run: npm test -- --coverage
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        npx sonarqube-scanner \
          -Dsonar.projectKey=africa-map \
          -Dsonar.sources=. \
          -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  # security_scans:
  #   name: Security Scan (Snyk & Trivy)
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #     - name: Install Dependencies
  #       run: npm install
  #     - name: Run Snyk Security Scan
  #       run: npx snyk test || true
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     - name: Scan Docker Image with Trivy
  #       run: |
  #         docker build -t my-app .
  #         docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasecurity/trivy image my-app
    

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, code_quality, security_scan]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=africa-map-image
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$IMAGE_TAG

    #   - name: Update Kubernetes Manifest
    #     run: |
    #       sed -i "s|image: .*/my-app:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/my-app:$IMAGE_TAG|" k8s/deployment.yaml
    #       git config --global user.email "github-actions@github.com"
    #       git config --global user.name "GitHub Actions"
    #       git add k8s/deployment.yaml
    #       git commit -m "Updated deployment image to $IMAGE_TAG"
    #       git push origin main

#docker tag local-image:tagname new-repo:tagname
#docker push new-repo:tagname

#   notify-argocd:
#     name: Notify ArgoCD
#     needs: build-and-push
#     runs-on: ubuntu-latest
#     steps:
#       - name: Sync ArgoCD
#         run: |
#           curl -X POST "https://argocd.example.com/api/v1/applications/my-app/sync" \
#                -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}"

# deploy:
#   name: Deploy to Kubernetes with ArgoCD
#   runs-on: ubuntu-latest
#   needs: build
#   steps:
#     - name: Sync ArgoCD Application
#       run: |
#         argocd app sync my-app --server ${{ secrets.ARGOCD_SERVER }} --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }}
